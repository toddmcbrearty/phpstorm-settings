<templateSet group="Giftogram">
  <template name="ricon" value="import React from 'react';&#10;import { Icon } from 'antd';&#10;&#10;const $NAME$Svg = ({ iconColor = 'white', backgroundColor = 'none' }) =&gt; (&#10;  $END$&#10;);&#10;&#10;const $NAME$Icon = props =&gt; &lt;Icon component={ $NAME$Svg } { ...props } /&gt;;&#10;&#10;export default $NAME$Icon" description="create icon file stub" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="redact" value="const $NAME$Actions = {&#10;  FETCH_$NAME_CAPS$_DATA_START: 'FETCH_$NAME_CAPS$_DATA_START',&#10;  FETCH_$NAME_CAPS$_DATA_SUCCESS: 'FETCH_$NAME_CAPS$_DATA_SUCCESS',&#10;  FETCH_$NAME_CAPS$_DATA_FAILURE: 'FETCH_$NAME_CAPS$_DATA_FAILURE',&#10;  fetch$NAME_PASCAL$DataStart: () =&gt; ({&#10;    type: $NAME_CAMEL$Actions.FETCH_$NAME_CAPS$_DATA_START&#10;  }),&#10;  fetch$NAME_PASCAL$DataSuccess: () =&gt; ({&#10;    type: $NAME_CAMEL$Actions.FETCH_$NAME_CAPS$_DATA_SUCCESS&#10;  }),&#10;  fetch$NAME_PASCAL$DataFailure: () =&gt; ({&#10;    type: $NAME_CAMEL$Actions.FETCH_$NAME_CAPS$_DATA_FAILURE&#10;  }),&#10;  &#10;  SAVE_$NAME_CAPS$_DATA_START: 'SAVE_$NAME_CAPS$_DATA_START',&#10;  SAVE_$NAME_CAPS$_DATA_SUCCESS: 'SAVE_$NAME_CAPS$_DATA_SUCCESS',&#10;  SAVE_$NAME_CAPS$_DATA_FAILURE: 'SAVE_$NAME_CAPS$_DATA_FAILURE',&#10;  save$NAME_PASCAL$DataStart: () =&gt; ({&#10;    type: $NAME_CAMEL$Actions.SAVE_$NAME_CAPS$_DATA_START&#10;  }),&#10;  save$NAME_PASCAL$DataSuccess: () =&gt; ({&#10;    type: $NAME_CAMEL$Actions.SAVE_$NAME_CAPS$_DATA_SUCCESS&#10;  }),&#10;  save$NAME_PASCAL$DataFailure: () =&gt; ({&#10;    type: $NAME_CAMEL$Actions.SAVE_$NAME_CAPS$_DATA_FAILURE&#10;  }),&#10;};&#10;&#10;export default $NAME$Actions;" description="create action" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_CAPS" expression="capitalizeAndUnderscore(NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="NAME_PASCAL" expression="capitalize(NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="NAME_CAMEL" expression="camelCase(NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="redred" value="import $NAME$Actions from './actions';&#10;&#10;const INITIAL_DATA = {&#10;  data: null,&#10;  loading: false,&#10;  error: null,&#10;};&#10;export default function $NAME_CAMEL$Reducer(state = INITIAL_DATA, action) {&#10;  switch (action.type) {&#10;    case $NAME_CAMEL$Actions.FETCH_$NAME_CAPS$_DATA_START:&#10;      return {&#10;        ...state,&#10;        loading: true,&#10;        error: null,&#10;      };&#10;    case $NAME_CAMEL$Actions.FETCH_$NAME_CAPS$_DATA_SUCCESS:&#10;      return {&#10;        ...state,&#10;        data: action.payload,&#10;        loading: false,&#10;        error: null,&#10;      };&#10;    case $NAME_CAMEL$Actions.FETCH_$NAME_CAPS$_DATA_FAILURE:&#10;      return {&#10;        ...state,&#10;        loading: false,&#10;        error: action.payload,&#10;      };&#10;&#10;    case $NAME_CAMEL$Actions.SAVE_$NAME_CAPS$_DATA_START:&#10;      return {&#10;        ...state,&#10;        loading: true,&#10;        error: null,&#10;      };&#10;    case $NAME_CAMEL$Actions.SAVE_$NAME_CAPS$_DATA_SUCCESS:&#10;      return {&#10;        ...state,&#10;        data: action.payload,&#10;        loading: false,&#10;        error: null,&#10;      };&#10;    case $NAME_CAMEL$Actions.SAVE_$NAME_CAPS$_DATA_FAILURE:&#10;      return {&#10;        ...state,&#10;        loading: false,&#10;        error: action.payload,&#10;      };&#10;    default:&#10;      return state;&#10;  }&#10;}&#10;" description="create action reducer" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_CAMEL" expression="camelCase(NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="NAME_CAPS" expression="capitalizeAndUnderscore(NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="redsag" value="import { all, takeEvery, put } from 'redux-saga/effects';&#10;&#10;import SuperFetch from 'library/helpers/superFetch';&#10;import $NAME$Actions from './actions';&#10;&#10;function* fetch$NAME_PASCAL$DataEffect() {&#10;  const $NAME$ = yield SuperFetch('/$NAME$');&#10;&#10;  try {&#10;    yield put($NAME$Actions.fetch$NAME_PASCAL$DataSuccess($NAME$.data));&#10;  } catch(error) {&#10;    yield put($NAME$Actions.fetch$NAME_PASCAL$DataFailure(error));&#10;  }&#10;}&#10;&#10;function save$NAME_PASCAL$DataEffect(payload) {&#10;    //TODO: add save&#10;}&#10;&#10;&#10;export default function* $NAME$Saga() {&#10;  yield all([&#10;    takeEvery($NAME$Actions.FETCH_$NAME_CAPS$_DATA_START, fetch$NAME_PASCAL$DataEffect),&#10;    takeEvery($NAME$Actions.SAVE_$NAME_CAPS$_DATA_START, save$NAME_PASCAL$DataEffect),&#10;  ]);&#10;}" description="create redux saga" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME_CAPS" expression="capitalizeAndUnderscore(NAME)" defaultValue="" alwaysStopAt="false" />
    <variable name="NAME_PASCAL" expression="capitalize(NAME)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>